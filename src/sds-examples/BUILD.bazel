package(default_visibility = ["//visibility:public"])

load("//:packages.bzl", "ROLLUP_GLOBALS")
load("//tools:defaults.bzl", "ng_module", "ng_package")
load("//tools/highlight-files:index.bzl", "highlight_files")
load("//tools/package-docs-content:index.bzl", "package_docs_content")

EXAMPLE_PACKAGES = [
    "//src/examples/components/footer",
     "//src/examples/formly/input",
    "//src/sds-examples/components/footer",
]

ng_module(
    name = "examples",
    srcs = glob(["**/*.ts"]),
    module_name = "@gsa-sam/sds-examples",
    deps = EXAMPLE_PACKAGES,
)

filegroup(
    name = "example-source-files",
    srcs = ["%s:source-files" % pkg for pkg in EXAMPLE_PACKAGES],
)

highlight_files(
    name = "highlighted-source-files",
    srcs = [":example-source-files"],
    tags = ["docs-package"],
)

package_docs_content(
    name = "docs-content",
    srcs = {
        # We want to package the guides in to the docs content. These will be displayed
        # in the documentation.
        "//guides": "guides",

        # Package the overviews for "@gsa-sam/components" into the docs content
        "//src/components:overviews": "overviews/components",
        "//src/formly:overviews": "overviews/formly",

        # Package the API docs for the Components package into the docs-content
        "//src:api-docs": "api-docs",

        # In order to be able to run examples in StackBlitz, we also want to package the
        # plain source files into the docs-content.
        ":example-source-files": "examples-source",

        # For the live-examples in our docs, we want to package the highlighted files
        # into the docs content. These will be used to show the source code for examples.
        ":highlighted-source-files": "examples-highlighted",
    },
    tags = ["docs-package"],
)

ng_package(
    name = "npm_package",
    srcs = ["package.json"],
    data = [":docs-content"],
    entry_point = ":public-api.ts",
    globals = ROLLUP_GLOBALS,
    tags = ["docs-package"],
    deps = [":examples"] + EXAMPLE_PACKAGES,
)

genrule(
    name = "example-module",
    # In case the example-module.ts file is present as an actual source file (e.g. generated
    # through Gulp), we need to exclude it because otherwise the genrule would fail.
    # TODO(devversion): remove this once gulp has been replaced with bazel.
    srcs = glob(
        ["**/*.ts"],
        exclude = ["example-module.ts"],
    ),
    # TODO(devversion): we can't name the genrule output "example-module.ts" as it would
    # get accidentally picked up when building the example module. See: angular/angular#30259
    outs = ["example-module_generated.ts"],
    cmd = """
    # As a workaround for https://github.com/bazelbuild/rules_nodejs/issues/404, we pass the
    # data to the Bazel entry-point through environment variables.
    export _SOURCE_FILES="$(SRCS)"
    export _OUTPUT_FILE="$@"
    export _BASE_DIR="$$(dirname $(location //src/examples:index.ts))"

    # Run the bazel entry-point for generating the example module.
    ./$(location //tools/example-module:bazel-bin)
  """,
    output_to_bindir = True,
    tools = ["//tools/example-module:bazel-bin"],
)
